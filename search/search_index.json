{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to Rithwik's Material Webpage","text":"<p>This is my home page for my portfolio, built using Material.</p>"},{"location":"#about-me","title":"About Me","text":"<p>Hi! My name is Rithwik Mishra, I'm a Computer Science and Statistics B.S. Double Major at UNC Chapel Hill with a passion for building scalable software, making an impact on real-world problems, and collaborating on innovative projects. I'm interested in in Software Engineering, Data Analytics, and Machine Learning. Welcome to my portfolio page! </p>"},{"location":"#skills","title":"Skills","text":"<ul> <li>Languages: Python, Java, R, SQL, JavaScript, TypeScript</li> <li>Tools and Frameworks: Git, Docker, Kubernetes, Angular, FastAPI</li> </ul>"},{"location":"#resume","title":"Resume","text":"<p>You can access my full resume using this link</p>"},{"location":"#contact-me","title":"Contact me","text":"<ul> <li>Email: mishra.rithwik05@gmail.com</li> <li>LinkedIn linkedin.com/in/rithwik-mishra</li> <li>GitHub github.com/rithwik-mishra</li> </ul>"},{"location":"projects/","title":"My Personal Projects","text":""},{"location":"projects/#pastebin-url-shortener-web-app","title":"Pastebin / URL Shortener Web App","text":"<p>As part of the COMP 423: Software Engineering Fundamentals class at UNC Chapel Hill, I lead the creation of a Pastebin / URL Shortener style app that would take either text or URLs and create a shortened link that directs users to that content. The Web App was broken into two parts: </p>"},{"location":"projects/#1-restful-api","title":"1. RESTful API","text":"<p>The API for the app was created using three layers: services, data models, and HTTP routing. FastAPI was used for our HTTP routing, Pydantic for data models, and services were injected into our api using dependency injection. Next, our API was deployed to the cloud using a CI/CD workflow, PyTest integration and unit testing, and Kubernetes OKD. My deployment can be accessed by clicking this link</p>"},{"location":"projects/#2-web-application","title":"2. Web Application","text":"<p>The Frontend for the  web application was created by using TypeScript, HTML/CSS, CORS, RxJs Observables, and Angular. The web application allows for the user to seamlessly use all the API routes defined to create and manage Pastebin/URL shortened link resources. The Frontend for the web application can be accessed by clicking this link</p>"},{"location":"tutorials/go-setup/","title":"Setting up a dev container for Go","text":"<ul> <li>Primary author: Rithwik Mishra</li> <li>Reviewer: Arsh Madhani</li> </ul>"},{"location":"tutorials/go-setup/#prerequisites","title":"Prerequisites","text":"<ul> <li>A GitHub account: Make sure you have an existing GitHub account or sign up here</li> <li>Git Installation: Install Git here if you do not have a preexisting installation.</li> <li>A coding IDE: VS Code is a great option for all platforms and is the one used by this tutorial.</li> <li>Docker: Docker is required to run the dev container that we create in this tutorial. Get Docker here</li> <li>A command terminal: Go works well using terminal in Linux or Mac and on powershell or cmd in Windows.</li> </ul>"},{"location":"tutorials/go-setup/#part-1-setting-up-your-directory-with-git","title":"Part 1: Setting up your directory with Git","text":""},{"location":"tutorials/go-setup/#step-1-initialize-git-and-create-a-local-repository","title":"Step 1. Initialize Git and Create a Local Repository","text":"<ul> <li> 1. Open terminal or your command prompt.</li> <li> <p> 2. Create a new directory to store your project files: <pre><code>mkdir hello-go\ncd hello-go\n</code></pre></p> </li> <li> <p> 3. Turn this directory into a new GitHub repository: <pre><code>git init\n</code></pre></p> </li> <li> <p> 4. Create a README file for your project and make your initial git commit: <pre><code>echo \"# Hello Go\" &gt; README.md\ngit add README.md\ngit commit -m \"Initial commit with README\"\n</code></pre></p> </li> </ul>"},{"location":"tutorials/go-setup/#step-2-create-a-remote-repository-on-github","title":"Step 2: Create a remote repository on GitHub","text":"<ul> <li> 1. Log into GitHub and go to the Create a new repository page.</li> <li> 2. Use the same repository name as your directory that you created, in this case we would set Repository Name as hello-go. </li> <li> 3. Click Create Repository.</li> </ul> Warning <p>Do not initialize the repository with a README, .gitignore, or license. We already created a README in the last step!</p>"},{"location":"tutorials/go-setup/#step-3-link-your-local-repository-to-github","title":"Step 3: Link your local repository to GitHub","text":"<ul> <li> 1. Assign the repository to the remote server with the following line: <pre><code>git remote add origin https://github.com/your-username/hello-go.git \n</code></pre></li> </ul> Warning <p>Make sure you replace \"your-username\" with your GitHub username!</p> <ul> <li> 2. Make sure your default branch is named main by using the <code>git branch</code> command. If its not called main, you can use the command <code>git branch -M main</code>.</li> <li> 3. Push your local commits to the remote repository on GitHub: <pre><code>git push --set-upstream origin main\n</code></pre></li> </ul> Note <p>You can check if this command worked by refreshing your GitHub repository in your browser and seeing if the local files you created and committed were pushed to the remote repository in the cloud! You can also use <code>git log</code> in your local terminal to see if the commit ID and message matches the commit ID of the most recent commit in your remote repository.</p>"},{"location":"tutorials/go-setup/#part-2-setting-up-a-dev-container-in-vs-code","title":"Part 2: Setting up a Dev Container in VS Code","text":"<p>Setting up a dev container is an important part of every programming project. Dev container ensures efficient and seamless collaboration between team members by creating a pre configured environment that is standardized across machines. This way, there wont be any problems stemming from individual machine setups since all team members have an identical environment with the exact same programming language, libraries, and dependency versions. We can create this dev container in VS Code by making a devcontainer.json file.</p>"},{"location":"tutorials/go-setup/#step-1-add-development-container-configuration-in-vs-code","title":"Step 1: Add Development Container Configuration in VS Code","text":"<ul> <li> 1. Open your <code>hello-go</code> directory in VS Code by clicking File &gt; Open Folder and locating your local directory.</li> <li> 2. Install the Dev Containers extension in VS Code if you don't have it already by clicking on the Extensions button in the sidebar and searching for the one made by Microsoft.</li> <li> 3. Create a <code>.devcontainer</code> directory in the root of your project, and then create a <code>devcontainer.json</code> file inside that directory. </li> <li> 4. In the dev container file, we will specify the following environment variables:<ul> <li>Name: A descriptive name for your dev container</li> <li>Image: The docker image to use in the environment, in this case we will use the latest Go environment from Microsoft</li> <li>Customizations: This variable specifies useful customizations to VS Code, which in our case is installing the Go extension when the environment is built.</li> <li>postCreateCommand: This variable specifies what command the environment should run after its been created.</li> </ul> </li> </ul> <p>Copy the following code inside your <code>devcontainer.json</code> file:  <pre><code>    {\n        \"name\": \"Go Dev Container\",\n        \"image\": \"mcr.microsoft.com/vscode/devcontainers/go:latest\",\n        \"customizations\": {\n            \"vscode\": {\n                \"settings\": {\n                    \"extensions\": [\"golang.go\"]\n                }\n            }\n        },\n        \"postCreateCommand\": \"go version\"\n    }\n</code></pre></p>"},{"location":"tutorials/go-setup/#step-2-reopen-the-project-with-your-vs-code-dev-container","title":"Step 2: Reopen the project with your VS Code dev container","text":"<p>Re open your VS Code workspace inside your dev container by pressing <code>Ctrl + Shift + P</code> on Windows or <code>Cmd + Shift + P</code> on Mac followed by typing and selecting \"Dev Containers: Reopen in Container\". Once your dev container finishes setting up, you can close the terminal and should see the current version of Go being used in the container since we specified <code>go version</code> to be our post create command.</p>"},{"location":"tutorials/go-setup/#part-3-creating-your-go-module-and-file","title":"Part 3: Creating your Go module and file","text":"<ul> <li> Enable dependency tracking for your Go project using the following command: <pre><code>go mod init example/hello\n</code></pre></li> </ul> Note <p>Usually we would link the dependency tracking module to an actual github repository location, such as github.com/mymodule, but for the purposes of this example we can just use example/hello</p> <ul> <li> <p> Create a file called <code>hello.go</code>, paste the following code, and then save the file: <pre><code>package main\n\nimport \"fmt\"\n\nfunc main() {\n    fmt.Println(\"Hello, COMP 423\")\n}\n</code></pre></p> </li> <li> <p> Run the <code>go run .</code> command to see the output of the code! It should print the string \"Hello, COMP 423\" to the terminal.</p> </li> <li> Alternatively, we can create a Windows executable using the <code>go build</code>, very similar to how we used the GCC command in COMP 211 when compiling C programs as runnables. This command, unlike <code>go run .</code>, only compiles our program instead of running it. </li> </ul> Note <p>You should see a new file in your VS Code IDE called hello, which is an executable identical to how the GCC command in 211 created a new executable that we had to run from the terminal.</p> <ul> <li> Run the executable using <code>./hello-go</code>. It should have the same \"output\" as the <code>go run .</code> command above.</li> <li> Commit and push your changes to your remote repository on GitHub using the following lines of code: <pre><code>git add .\ngit push origin\n</code></pre></li> </ul>"},{"location":"tutorials/go-setup/#conclusion","title":"Conclusion","text":"<p>Congratulations! You've successfully run a Go Tutorial and configured a development environment. This foundational skill can be applied to many open-source and professional projects. </p>"}]}